@layout('common/layouts')

@section('content')

<!-- Container -->
<main class="grow content pt-5" id="content" role="content">
  <div class="container-fixed">
    <div class="flex flex-wrap items-center lg:items-end justify-between gap-5 pb-7.5">
      <div class="flex flex-col justify-center gap-2">
        <h1 class="text-xl font-medium leading-none text-gray-900">
          {{ trans('create') }}
        </h1>
      </div>
      <div class="flex items-center gap-2.5">
        <button type="button" class="btn btn-sm btn-light" onclick="window.history.back()">
          {{ trans('back') }}
        </button>
        <button type="submit" class="btn btn-sm btn-primary" form="create_form" id="submit_btn">
          <span class="indicator-label">{{ trans('submit') }}</span>
          <span class="indicator-progress hidden">
            <span
              class="animate-spin inline-block w-4 h-4 border-[2px] border-current border-t-transparent text-white rounded-full"
              role="status" aria-label="loading"></span>
          </span>
        </button>
      </div>
    </div>
  </div>
  <div class="container-fixed">
    <div class="grid gap-5 lg:gap-7.5">
      <div class="card min-w-full">
        <div class="card-body">
          <form id="create_form" class="grid gap-5" method="POST">
            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('username') }}
              </label>
              <input id="username" name="username" class="input max-w-[300px]" placeholder="{{ trans('username') }}"
                type="text" required />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('password') }}
              </label>
              <input id="password" name="password" class="input max-w-[300px]" placeholder="{{ trans('password') }}"
                type="password" required />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('password confirm') }}
              </label>
              <input id="password_confirm" name="password_confirm" class="input max-w-[300px]"
                placeholder="{{ trans('password confirm') }}" type="password" required />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('nickname') }}
              </label>
              <input id="nickname" name="nickname" class="input max-w-[300px]" placeholder="{{ trans('nickname') }}"
                type="text" required />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('email') }}
              </label>
              <input id="email" name="email" class="input max-w-[300px]" placeholder="{{ trans('email') }}"
                type="text" />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('status') }}
              </label>
              <select id="member_status_id" name="member_status_id" class="select max-w-[300px]" required>
                @each(status in status_list)
                <option value="{{ status.member_status_id }}">
                  {{ status.member_status_name }}
                </option>
                @endeach
              </select>
            </div>


            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5 h-[400px] content-start">
              <label class="form-label max-w-56">
                {{ trans('remark') }}
              </label>
              <div class="grow h-[250px] max-w-[800px]">
                <div id="remark"></div>
              </div>
            </div>

          </form>
        </div>
      </div>
    </div>
  </div>
</main>
<!-- End of Container -->
@endsection

@section('scripts')
<script src="/assets/js/rich_editor/rich_editor.js"></script>
<script src="/assets/vendors/@form-validation/form-validation.bundle.js"></script>
<script>
  // 声明为全局变量
  var editor;

  var validator;

  /**
   * 初始化表单验证
   * @param {string} formId - 表单元素的ID
   * @returns {Object} - FormValidation实例
   */
  function initFormValidation(formId) {
    const form = document.querySelector(formId);

    const validator = FormValidation.formValidation(form, {
      fields: {
        username: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            },
            regexp: {
              regexp: /^[a-zA-Z0-9]+$/,
              message: trans('please enter in the correct format')
            },

          }
        },
        password: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            },
            stringLength: {
              min: 6,
              max: 16,
              message: trans('please enter in the correct format')
            }
          }
        },
        password_confirm: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            },
            identical: {
              compare: function() {
                return form.querySelector('[name="password"]').value;
              },
              message: trans('please enter in the correct format')
            }
          }
        },
        nickname: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            }
          }
        },
        email: {
          validators: {
            emailAddress: {
              message: trans('please enter in the correct format')
            }
          }
        },
        member_status_id: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            }
          }
        }
      },
      plugins: {
        trigger: new FormValidation.plugins.Trigger(),
        bootstrap: new FormValidation.plugins.Bootstrap5({
          rowSelector: '.flex',
          eleInvalidClass: 'border-red-500',
          eleValidClass: 'border-green-500',
          messageClass: 'text-gray-500'
        }),
        submitButton: new FormValidation.plugins.SubmitButton(),
      }
    });

    return validator;
  }


  document.addEventListener('DOMContentLoaded', async function() {
    try {

      // 创建编辑器实例
      editor = await new RichEditor('#remark', 'simple');

      // 初始化表单验证
      validator = initFormValidation('#create_form');

    } catch (error) {
      console.error('编辑器初始化失败:', error);
      showError(trans('please refresh the page and try again'));
    }
  });

  /**
   * 通用表单提交处理函数
   */
  Util.handleFormSubmit('#create_form', '#submit_btn', async (formData) => {
    try {
      // 进行表单验证
      const isValid = await validator.validate();
      if (isValid==='Invalid') {
        throw new Error(trans('please check the form'));
      }

      // 获取富文本框内容并添加到表单数据
      if (editor) {
        const remarkContent = editor.getContents();
        formData.append('remark', JSON.stringify(remarkContent));
      }

      const response = await axios.post('/api/member/create-info', formData, {
        headers: {
          'token': localStorage.getItem('token')
        }
      });

      if (response.data.code === 0) {
        showSuccess(trans('operation success'), {
          onConfirm: () => {
            window.location.href = '/admin/member/list';
          }
        })
        return response.data;
      } else {
        throw new Error(response.data.msg || trans('operation failed'));
      }
    } catch (error) {
      console.error(trans('operation failed') + ':', error);
      throw error;
    }
  });
</script>
@endsection