@layout('common/layouts')

@section('content')

<!-- Container -->
<main class="grow content pt-5" id="content" role="content">
  <div class="container-fixed">
    <div class="flex flex-wrap items-center lg:items-end justify-between gap-5 pb-7.5">
      <div class="flex flex-col justify-center gap-2">
        <h1 class="text-xl font-medium leading-none text-gray-900">
          {{ trans('edit') }}
        </h1>
      </div>
      <div class="flex items-center gap-2.5">
        <button type="button" class="btn btn-sm btn-light" onclick="window.history.back()">
          {{ trans('back') }}
        </button>
        <button type="submit" class="btn btn-sm btn-primary" form="edit_form" id="submit_btn">
          <span class="indicator-label">{{ trans('submit') }}</span>
          <span class="indicator-progress hidden">
            <span
              class="animate-spin inline-block w-4 h-4 border-[2px] border-current border-t-transparent text-white rounded-full"
              role="status" aria-label="loading"></span>
          </span>
        </button>
      </div>
    </div>
  </div>
  <div class="container-fixed">
    <div class="grid gap-5 lg:gap-7.5">
      <div class="card min-w-full">
        <div class="card-body">
          <form id="edit_form" class="grid gap-5" method="POST">
            <input type="hidden" name="member_id" value="{{ member_info.member_id }}">

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('nickname') }}
              </label>
              <input id="nickname" name="nickname" class="input max-w-[300px]" placeholder="{{ trans('nickname') }}"
                type="text" value="{{ member_info.nickname }}" required />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('email') }}
              </label>
              <input id="email" name="email" class="input max-w-[300px]" placeholder="{{ trans('email') }}" type="text"
                value="{{ member_info.email || '' }}" />
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                {{ trans('status') }}
              </label>
              <select id="member_status_id" name="member_status_id" class="select max-w-[300px]" required>
                @each(status in status_list)
                <option value="{{ status.member_status_id }}"
                  {{ member_info.member_status_id + ''===status.member_status_id + '' ? 'selected' : '' }}>
                  {{ status.member_status_name }}
                </option>
                @endeach
              </select>
            </div>

            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5">
              <label class="form-label max-w-56">
                附件
              </label>
              <input class="file-input max-w-[300px]" type="file" name="file" />
            </div>
            <div class="flex items-baseline flex-wrap lg:flex-nowrap gap-2.5 h-[400px] content-start">
              <label class="form-label max-w-56">
                {{ trans('remark') }}
              </label>
              <div class="grow h-[250px] max-w-[800px]">
                <div id="remark"></div>
              </div>
            </div>


          </form>
        </div>
      </div>
    </div>
  </div>
</main>
<!-- End of Container -->
@endsection

@section('scripts')
<script src="/assets/js/rich_editor/rich_editor.js"></script>
<script src="/assets/vendors/@form-validation/form-validation.bundle.js"></script>
<script>
  // 声明为全局变量
  // 声明为全局变量
  var editor;
  var validator;

  /**
   * 初始化表单验证
   * @param {string} formId - 表单元素的ID
   * @returns {Object} - FormValidation实例
   */
  function initFormValidation(formId) {
    const form = document.querySelector(formId);

    const validator = FormValidation.formValidation(form, {
      fields: {
        nickname: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            }
          }
        },
        email: {
          validators: {
            emailAddress: {
              message: trans('please enter in the correct format')
            }
          }
        },
        member_status_id: {
          validators: {
            notEmpty: {
              message: trans('please enter in the correct format')
            }
          }
        }
      },
      plugins: {
        trigger: new FormValidation.plugins.Trigger(),
        bootstrap: new FormValidation.plugins.Bootstrap5({
          rowSelector: '.flex',
          eleInvalidClass: 'border-red-500',
          eleValidClass: 'border-green-500',
          messageClass: 'text-gray-500'
        }),
        submitButton: new FormValidation.plugins.SubmitButton(),
      }
    });

    return validator;
  }

  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // 创建编辑器实例（不再需要显式初始化）
      editor = await new RichEditor('#remark', 'simple');

      // 如果有初始数据，设置到编辑器中
      const remarkData = {{{ member_info.remark || null }}};
      if (remarkData) {
        editor.setContents(remarkData);
      }

      // 初始化表单验证
      validator = initFormValidation('#edit_form');

    } catch (error) {
      console.error('编辑器初始化失败:', error);
      showError(trans('please refresh the page and try again'));
    }
  });

  /**
   * 通用表单提交处理函数
   * @param {string} formSelector - 表单选择器
   * @param {string} btnSelector - 提交按钮选择器
   * @param {Function} submitCallback - 异步回调函数，处理实际的提交逻辑
   */
  Util.handleFormSubmit('#edit_form', '#submit_btn', async (formData) => {
    try {
      // 进行表单验证
      const isValid = await validator.validate();
      if (isValid === 'Invalid') {
        throw new Error(trans('please check the form'));
      }

      // 获取富文本框内容并添加到表单数据
      if (editor) {
        const remarkContent = editor.getContents();
        formData.append('remark', JSON.stringify(remarkContent));
      }

      const response = await axios.post('/api/member/update-info', formData, {
        headers: {
          'token': localStorage.getItem('token')
        }
      });

      if (response.data.code === 0) {
        showSuccess(trans('operation success'), {
          onConfirm: () => {
            window.location.href = '/admin/member/list';
          }
        })
        return response.data;
      } else {
        throw new Error(response.data.msg || trans('operation failed'));
      }
    } catch (error) {
      console.error('操作失败:', error);
      throw error;
    }
  });
</script>
@endsection