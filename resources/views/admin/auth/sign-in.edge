@layout('common/noauth_layouts')

@section('content')
<!-- Page -->
<style>
  .page-bg {
    background-image: url('assets/media/images/2600x1200/bg-10.png');
  }

  .dark .page-bg {
    background-image: url('assets/media/images/2600x1200/bg-10-dark.png');
  }
</style>
<div class="flex items-center justify-center grow bg-center bg-no-repeat page-bg">
  <div class="card max-w-[370px] w-full">
    <form action="#" class="card-body flex flex-col gap-5 p-10" id="sign_in_form" method="post">
      <!-- CSRF Token -->
      {{ csrfField() }}

      <div class="text-center mb-2.5">
        <h3 class="text-lg font-medium text-gray-900 leading-none mb-2.5">{{ trans('login') }}</h3>
        <div class="flex items-center justify-center font-medium">
          <span class="text-2sm text-gray-700 me-1.5"> {{ trans('need an account') }} </span>
          <a class="text-2sm link" href="./admin/auth/sign-up"> {{ trans('register') }} </a>
        </div>
      </div>

      <!-- 语言选择器 -->
      <div class="flex flex-col gap-1">
        <label class="form-label text-gray-900">{{ trans('language') }}</label>
        <select id="language-selector" class="select" onchange="changeLanguage(this.value)">
          <option value="21">{{ trans('chinese') }}</option>
          <option value="2">{{ trans('english') }}</option>
        </select>
      </div>

      <div class="flex flex-col gap-1">
        <label class="form-label font-normal text-gray-900"> {{ trans('username') }} </label>
        <input name="username" class="input" placeholder="{{ trans('please enter username') }}" type="text" value=""
          tabindex="1">
      </div>
      <div class="flex flex-col gap-1">
        <div class="flex items-center justify-between gap-1">
          <label class="form-label font-normal text-gray-900"> {{ trans('password') }} </label>
          <a class="text-2sm link shrink-0" href="admin/authentication/classic/reset-password/enter-email"
            tabindex="-1">
            {{ trans('forgot password') }} </a>
        </div>
        <div class="input" data-toggle-password="true">
          <input name="password" placeholder="{{ trans('please enter password') }}" type="password" value=""
            tabindex="2">
          <button class="btn btn-icon" data-toggle-password-trigger="true" type="button" tabindex="-1">
            <i class="ki-filled ki-eye text-gray-500 toggle-password-active:hidden"> </i>
            <i class="ki-filled ki-eye-slash text-gray-500 hidden toggle-password-active:block"> </i>
          </button>
        </div>
      </div>
      <label class="checkbox-group">
        <input class="checkbox checkbox-sm" name="check" type="checkbox" value="1" tabindex="3">
        <span class="checkbox-label"> {{ trans('remember me') }} </span>
      </label>
      <!-- Submit button with loading state -->
      <button type="submit" id="submit_btn" class="btn btn-primary flex justify-center grow" tabindex="4">
        <span class="indicator-label">{{ trans('login') }}</span>
        <span class="indicator-progress hidden">
          <span
            class="animate-spin inline-block w-4 h-4 border-[2px] border-current border-t-transparent text-white rounded-full"
            role="status" aria-label="loading"></span>
        </span>
      </button>
    </form>
  </div>
</div>
<!-- End of Page -->
@endsection
<!-- script -->
@section('scripts')
<script>
  const form = document.getElementById('sign_in_form');
  const submitButton = document.getElementById('submit_btn');

  // 防止重复提交
  let isSubmitting = false;

  // 页面加载时检查是否有保存的用户名和密码
  document.addEventListener('DOMContentLoaded', function() {
    const savedCredentials = localStorage.getItem('saved_credentials');
    if (savedCredentials) {
      const { username, password } = JSON.parse(savedCredentials);
      form.querySelector('[name="username"]').value = username;
      form.querySelector('[name="password"]').value = password;
      form.querySelector('[name="check"]').checked = true;
    }

    // 初始化语言选择器
    initLanguageSelector();
  });

  // 语言切换函数
  async function changeLanguage(language) {
    try {
      const response = await axios.post('/api/set-language', { language });
      if (response.data.code === 0) {
        // 清除本地翻译缓存
        localStorage.removeItem('translation');
        localStorage.removeItem('translation_update_time');

        // 重新加载页面以应用新语言
        showSuccess(trans('language changed successfully'), {
          autoClose: 1000,
          onConfirm: () => {
            window.location.reload();
          }
        });
      } else {
        showError(response.data.msg || trans('language change failed'));
      }
    } catch (error) {
      showError(error.message || trans('language change failed'));
    }
  }

  // 初始化语言选择器
  function initLanguageSelector() {
    // 从localStorage获取当前语言设置
    const currentLanguage = localStorage.getItem('selectedLanguage') || '21';
    const languageSelector = document.getElementById('language-selector');
    if (languageSelector) {
      languageSelector.value = currentLanguage;
    }
  }

  form.addEventListener('submit', async function (e) {
    e.preventDefault();

    if (isSubmitting) return;

    // 验证表单
    if (!validateForm()) {
      return;
    }

    // 显示加载状态
    submitButton.querySelector('.indicator-label').classList.add('hidden');
    submitButton.querySelector('.indicator-progress').classList.remove('hidden');
    submitButton.disabled = true;
    isSubmitting = true;

    try {
      const formData = new FormData(form);
      const response = await axios.post('/api/member/sign-in', Object.fromEntries(formData));
      if (response.data.code == 0) {
        // 处理记住密码
        const rememberMe = form.querySelector('[name="check"]').checked;
        if (rememberMe) {
          // 保存用户名和密码
          const credentials = {
            username: form.querySelector('[name="username"]').value,
            password: form.querySelector('[name="password"]').value
          };
          localStorage.setItem('saved_credentials', JSON.stringify(credentials));
        } else {
          // 清除保存的用户名和密码
          localStorage.removeItem('saved_credentials');
        }

        localStorage.setItem('token', response.data.data.token)
        showSuccess(trans('login success'), {
          autoClose: 1000,
          onConfirm: () => {
            window.location.href = '/admin/';
          }
        })
        return null
      }
      throw new Error(response.data.msg)
    } catch (e) {
      showError(e.message || '发生错误，请稍后重试');
    } finally {
      // 恢复按钮状态
      submitButton.querySelector('.indicator-label').classList.remove('hidden');
      submitButton.querySelector('.indicator-progress').classList.add('hidden');
      submitButton.disabled = false;
      isSubmitting = false;
    }
  });

  // 监听记住密码复选框的变化
  form.querySelector('[name="check"]').addEventListener('change', function(e) {
    if (!e.target.checked) {
      // 取消勾选时，立即清除保存的用户名和密码
      localStorage.removeItem('saved_credentials');
    }
  });

  // 简单的表单验证
  function validateForm() {
    const username = form.querySelector('[name="username"]').value;
    const password = form.querySelector('[name="password"]').value;

    if (!username) {
      showError('请输入用户名');
      return false;
    }

    if (!password) {
      showError('请输入密码');
      return false;
    }

    return true;
  }


</script>
@endsection
