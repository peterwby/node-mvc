@layout('common/layouts')

@section('content')

<!-- Container -->
<main class="grow content pt-5" id="content" role="content">
  <!-- Container -->
  <div class="container-fixed">
    <div class="flex flex-wrap items-center lg:items-end justify-between gap-5 pb-7.5">
      <div class="flex flex-col justify-center gap-2">
        <h1 class="text-xl font-medium leading-none text-gray-900">
          会员列表
        </h1>

      </div>
      <div class="flex items-center gap-2.5">
        <button id="batch_delete_btn" class="btn btn-sm btn-danger" disabled>
          批量删除
        </button>
      </div>
    </div>
  </div>
  <!-- End of Container -->
  <!-- Container -->
  <div class="container-fixed">
    <div class="grid gap-5 lg:gap-7.5">
      <div class="card card-grid min-w-full">
        <div class="card-header flex-wrap gap-2">
          <div class="flex flex-wrap gap-2 lg:gap-5">
            <form id="filter_form" class="flex flex-wrap gap-2 lg:gap-5" method="GET" action="/admin/member/list">
              <div class="flex">
                <label class="input input-sm">
                  <i class="ki-filled ki-magnifier">
                  </i>
                  <input placeholder="Search users" name="search" type="text"
                    value="{{ request.input('search') || '' }}">
                </label>
              </div>
              <div class="flex flex-wrap gap-2.5">
                <select class="select select-sm w-28" name="member_status_id">
                  <option value="">状态</option>
                  @each(status in status_list)
                  <option value="{{ status.member_status_id }}"
                    {{ request.input('member_status_id') + '' === status.member_status_id + '' ? 'selected' : '' }}>
                    {{ status.member_status_name }}
                  </option>
                  @endeach
                </select>
                <button type="submit" class="btn btn-sm btn-outline btn-primary">
                  <i class="ki-filled ki-setting-4">
                  </i>
                  搜索
                </button>
                <button type="button" id="reset_filter_btn" class="btn btn-sm btn-outline btn-secondary">
                  <i class="ki-filled ki-arrows-circle"></i>
                  重置
                </button>
              </div>
            </form>
          </div>
        </div>
        <div class="card-body">
          <div data-datatable="false" id="primary_table">
            <div class="scrollable-x-auto">
              <table class="table table-auto table-border " data-datatable-table="true">
                <thead>
                  <tr>
                    <th class="w-[60px] text-center">
                      <input class="checkbox checkbox-sm" data-datatable-check="true" type="checkbox" />
                    </th>
                    <th class="min-w-[200px]">
                      <span class="sort asc">
                        <span class="sort-label font-normal text-gray-700">
                          Nickname
                        </span>
                        <span class="sort-icon">
                        </span>
                      </span>
                    </th>
                    <th class="min-w-[200px]">
                      <span class="sort asc">
                        <span class="sort-label font-normal text-gray-700">
                          Email
                        </span>
                        <span class="sort-icon">
                        </span>
                      </span>
                    </th>
                    <th class="min-w-[200px]">
                      <span class="sort asc">
                        <span class="sort-label font-normal text-gray-700">
                          Created At
                        </span>
                        <span class="sort-icon">
                        </span>
                      </span>
                    </th>
                    <th class="min-w-[100px]">
                      <span class="sort asc">
                        <span class="sort-label font-normal text-gray-700">
                          状态
                        </span>
                        <span class="sort-icon">
                        </span>
                      </span>
                    </th>
                    <th class="w-[60px]">
                    </th>
                  </tr>
                </thead>
              </table>
            </div>
            <div
              class="card-footer justify-center md:justify-between flex-col md:flex-row gap-5 text-gray-600 text-2sm font-medium">
              <div class="flex items-center gap-2 order-2 md:order-1">
                每页
                <select class="select select-sm w-16" data-datatable-size="true" name="perpage">
                </select>
                条
              </div>
              <div class="flex items-center gap-4 order-1 md:order-2">
                <span data-datatable-info="true"></span>
                <div class="pagination" data-datatable-pagination="true">
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <!-- End of Container -->
</main>

<script type="application/json" id="server_data">
</script>

<!-- End of Container -->
@endsection

@section('scripts')
<script>
  // 从隐藏的 script 元素获取数据
  // const serverData = JSON.parse(document.getElementById('server_data').textContent);

  // 从 URL 参数中获取搜索词
  const urlParams = new URLSearchParams(window.location.search);

  const datatableEl = document.querySelector('#primary_table');
  const options = {
    requestMethod: 'POST',
    requestHeaders: {
      'Content-Type': 'application/x-www-form-urlencoded',
      'token': localStorage.getItem('token')
    },
    apiEndpoint: window.location.origin + '/api/member/get-list',
    stateSave: false,
    info: "第{start} - {end} / 共{total}条",
    infoEmpty: "没有数据",
    pageSizes: [5, 10, 20, 50, 100],
    pageSize: 5, //defalut size perPage
    pageMore: "更多",
    pageMoreLimit: 5,
    mapRequest: (params) => {
      //在这里设置自定义筛选参数

      // 获取表单元素
      const form = document.getElementById('filter_form');
      const formData = new FormData(form);

      // 遍历表单数据，只添加非空参数
      for (const [key, value] of formData.entries()) {
        if (value && value.trim()) {
          params.set(key, value.trim());
        }
      }

      // 如果需要列排序，则要自定义排序字段映射
      // const sortFieldMapping = {
      //   1: 'nickname',
      //   2: 'email',
      //   3: 'created_at',
      //   // 添加其他字段映射
      // }
      // const sortField = params.get('sortField');
      // if (sortField && sortFieldMapping[sortField]) {
      //   params.set('sortField', sortFieldMapping[sortField]);
      // }

      return params;
    },
    columns: {
      member_id: {
        render: (item, data, context) => {
          return '<input class="checkbox checkbox-sm" data-datatable-row-check="true" type="checkbox" value="' + item + '">';
        },
      },
      nickname: {
        render: (item, data, context) => {
          return '<div class="flex items-center gap-3">' +
            '<div class="symbol symbol-35px">' +
            '<img src="/assets/media/avatars/300-2.png" alt="avatar" class="w-[35px] h-[35px] rounded-full">' +
            '</div>' +
            '<div class="font-semibold">' + item + '</div>' +
            '</div>';
        },
      },
      email: {
        render: (item, data, context) => {
          return '<div>' + (item || '暂无') + '</div><div><a class="text-blue-500" href="http://www.google.com" target="_blank">跳转</a></div>';
        },
      },
      member_status_name: {
        render: (item, data, context) => {
          const statusClass = item === '启用' ? 'text-success' : 'text-danger';
          return '<div class="' + statusClass + ' font-medium">' + item + '</div>';
        },
      },
      created_at: {},
      action: {
        title: '操作',
        render: (item, data, context) => {
          return '<div class="menu flex-inline" data-menu="true">' +
            '<div class="menu-item" data-menu-item-offset="0, 10px" data-menu-item-placement="bottom-end" data-menu-item-placement-rtl="bottom-start" data-menu-item-toggle="dropdown" data-menu-item-trigger="click|lg:click">' +
            '<button class="menu-toggle btn btn-sm btn-icon btn-light btn-clear">' +
            '<i class="ki-filled ki-dots-vertical">' +
            '</i>' +
            '</button>' +
            '<div class="menu-dropdown menu-default w-full max-w-[120px]" data-menu-dismiss="true">' +

            '<div class="menu-item">' +
            '<a class="menu-link" href="/admin/member/view/' + data.member_id + '">' +
            '<span class="menu-title">' +
            'View' +
            '</span>' +
            '</a>' +
            '</div>' +

            '<div class="menu-item">' +
            '<a class="menu-link" href="/admin/member/edit/' + data.member_id + '">' +
            '<span class="menu-title">' +
            'Edit' +
            '</span>' +
            '</a>' +
            '</div>' +

            '<div class="menu-separator">' +
            '</div>' +

            '<div class="menu-item">' +
            '<button type="button" class="menu-link remove-btn" data-member-id="' + data.member_id + '">' +
            '<span class="menu-title">' +
            'Remove' +
            '</span>' +
            '</button>' +
            '</div>' +

            '</div>' +
            '</div>' +
            '</div>';
        },
      },
    },
    loading: {
      template: '<div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">' +
        '<div class="flex items-center gap-2 px-4 py-2 font-medium leading-none text-2sm border border-gray-200 shadow-default rounded-md text-gray-500 bg-light">' +
        '<svg class="animate-spin -ml-1 h-5 w-5 text-gray-600" fill="none" viewbox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">' +
        '<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="3">' +
        '</circle>' +
        '<path class="opacity-75" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" fill="currentColor">' +
        '</path>' +
        '</svg>' +
        '{content}' +
        '</div>' +
        '</div>',
      content: ''
    },
  };
  const datatable = new KTDataTable(datatableEl, options);

  // 处理筛选表单提交
  document.getElementById('filter_form').addEventListener('submit', function(e) {
    e.preventDefault();
    // 重置页码为1
    datatable.goPage(1);
    datatable.reload();
  });

  // 处理重置按钮点击
  document.getElementById('reset_filter_btn').addEventListener('click', function() {
    const form = document.getElementById('filter_form');
    // 重置所有输入框和选择框
    form.querySelectorAll('input, select').forEach(element => {
      element.value = '';
    });
    // 重新加载数据表格
    datatable.reload();
  });

  // 处理单行删除按钮点击
  document.addEventListener('click', async function(e) {
    const btn = e.target.closest('.remove-btn');
    if (!btn) return;

    if (!confirm('确定要删除这个会员吗？')) {
      return;
    }

    // 获取按钮元素
    const loadingEl = btn.querySelector('.menu-title');
    const originalText = loadingEl.textContent;
    const memberId = btn.dataset.memberId;

    // 显示加载状态
    loadingEl.textContent = '删除中...';
    btn.disabled = true;

    try {
      const response = await axios.post('/api/member/remove', {
        ids: [memberId]
      });

      if (response.data.code === 0) {
        // 显示成功提示
        Util.successMsg('删除成功');
        // 刷新表格
        datatable.reload();
      } else {
        // 显示错误提示
        Util.errorMsg(response.data.message || '删除失败');
      }
    } catch (error) {
      console.error('删除失败:', error);
      // 显示错误提示
      Util.errorMsg('删除失败，请稍后重试');
    } finally {
      // 恢复按钮状态
      loadingEl.textContent = originalText;
      btn.disabled = false;
    }
  });

  // 处理批量删除
  const batchDeleteBtn = document.getElementById('batch_delete_btn');

  // 监听表格的选择变化
  document.addEventListener('change', function(e) {
    const checkbox = e.target.closest('[data-datatable-row-check="true"], [data-datatable-check="true"]');
    if (!checkbox) return;

    // 使用setTimeout确保在checkbox状态更新后再获取选中的行
    setTimeout(() => {
      const checkedRows = datatable.getChecked();
      batchDeleteBtn.disabled = checkedRows.length === 0;
    }, 0);
  });

  // 批量删除按钮点击事件
  batchDeleteBtn.addEventListener('click', async function() {
    const checkedRows = datatable.getChecked();
    if (checkedRows.length === 0) return;

    if (!confirm('确定要删除选中的 ' + checkedRows.length + ' 个会员吗？')) {
      return;
    }

    // 显示加载状态
    const originalText = this.textContent;
    this.textContent = '删除中...';
    this.disabled = true;

    try {
      const response = await axios.post('/api/member/remove', {
        ids: checkedRows
      });

      if (response.data.code === 0) {
        // 显示成功提示
        Util.successMsg('批量删除成功');
        // 刷新表格
        datatable.reload();
      } else {
        // 显示错误提示
        Util.errorMsg(response.data.message || '批量删除失败');
      }
    } catch (error) {
      console.error('批量删除失败:', error);
      // 显示错误提示
      Util.errorMsg('批量删除失败，请稍后重试');
    } finally {
      // 恢复按钮状态
      this.textContent = originalText;
      this.disabled = false;
    }
  });
</script>
@endsection