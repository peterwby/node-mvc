@layout('common/layouts')

@section('content')
<!-- Container -->
<main class="grow content pt-5" role="content">
  <div class="container-fixed">
    <div class="flex flex-wrap items-center lg:items-end justify-between gap-5 pb-7.5">
      <div class="flex flex-col justify-center gap-2">
        <h1 class="text-xl font-medium leading-none text-gray-900">
          {{ trans('configure_permissions') }}
        </h1>
        <div class="text-gray-500 text-sm">
          {{ trans('current_role') }}: <strong>{{ info.role_name }}</strong>
        </div>
      </div>
      <div class="flex items-center gap-2.5">
        <button type="button" class="btn btn-sm btn-light" onclick="window.history.back()">
          {{ trans('back') }}
        </button>
        <button type="button" class="btn btn-sm btn-primary" onclick="savePermissions()" id="submit_btn">
          <span class="indicator-label">{{ trans('submit') }}</span>
          <span class="indicator-progress hidden">
            <span
              class="animate-spin inline-block w-4 h-4 border-[2px] border-current border-t-transparent text-white rounded-full"
              role="status" aria-label="loading"></span>
          </span>
        </button>
      </div>
    </div>
  </div>
  <div class="container-fixed">
    <div class="grid gap-5 lg:gap-7.5">
      <div class="card min-w-full">
        <div class="card-body">
          <div id="permission_tree" class="min-h-[400px] space-y-4">
            <!-- Tree will be rendered here -->
          </div>
        </div>
      </div>
    </div>
  </div>
</main>
<!-- End of Container -->
@endsection

@section('styles')
<style>
  .permission-group {
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
  }

  .permission-group-header {
    padding: 0.8rem;
    background-color: #f9fafb;
    border-bottom: 1px solid #e5e7eb;
    border-radius: 0.5rem 0.5rem 0 0;
  }

  .permission-group-body {
    padding: 1rem;
  }

  .permission-item {
    font-size: 0.75rem;
    padding: 0.3rem;
    transition: background-color 0.2s;
  }

  .permission-item:hover {
    background-color: #f3f4f6;
  }
</style>
@endsection

@section('scripts')
<script>
  let permissions = []

document.addEventListener('DOMContentLoaded', function() {
  initPermissionTree()
})

// 初始化权限树
async function initPermissionTree() {
  try {

    const response = await axios.get('/api/roles/get-permissions/{{ info.id }}')

    if (response.data.code === 0) {
      permissions = response.data.data.permissions
      renderPermissionTree()
    } else {
      Util.errorMsg(response.data.msg || trans('load_failed'))
    }
  } catch (error) {
    console.error('加载权限树失败:', error)
    Util.errorMsg(trans('error'))
  } finally {

  }
}

// 渲染权限树
function renderPermissionTree() {
  const treeElement = document.getElementById('permission_tree')
  treeElement.innerHTML = ''

  permissions.forEach(group => {
    const groupElement = document.createElement('div')
    groupElement.className = 'permission-group'

    // 创建组标题
    const headerElement = document.createElement('div')
    headerElement.className = 'permission-group-header flex items-center gap-2'
    headerElement.innerHTML =
      '<label class="flex items-center gap-2 cursor-pointer">' +
        '<input type="checkbox" class="checkbox checkbox-sm group-checkbox" ' +
          'data-group="' + group.id + '" ' +
          (group.state?.selected ? 'checked' : '') + '>' +
        '<span class="font-medium">' + group.text + '</span>' +
      '</label>'

    // 创建权限列表
    const bodyElement = document.createElement('div')
    bodyElement.className = 'permission-group-body grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4'

    group.children.forEach(permission => {
      const itemElement = document.createElement('div')
      itemElement.className = 'permission-item'
      itemElement.innerHTML =
        '<label class="flex items-center gap-2 cursor-pointer">' +
          '<input type="checkbox" class="checkbox checkbox-sm permission-checkbox" ' +
            'data-id="' + permission.id + '" ' +
            'data-group="' + group.id + '" ' +
            (permission.state?.selected ? 'checked' : '') + '>' +
          '<span>' + permission.text + '</span>' +
        '</label>'
      bodyElement.appendChild(itemElement)
    })

    groupElement.appendChild(headerElement)
    groupElement.appendChild(bodyElement)
    treeElement.appendChild(groupElement)
  })

  // 添加组选择事件
  document.querySelectorAll('.group-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const groupId = this.dataset.group
      const permissionCheckboxes = document.querySelectorAll('.permission-checkbox[data-group="' + groupId + '"]')
      permissionCheckboxes.forEach(permissionCheckbox => {
        permissionCheckbox.checked = this.checked
      })
    })
  })

  // 添加权限选择事件
  document.querySelectorAll('.permission-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      updateGroupCheckbox(this.dataset.group)
    })
  })
}

// 更新组复选框状态
function updateGroupCheckbox(groupId) {
  const permissionCheckboxes = document.querySelectorAll('.permission-checkbox[data-group="' + groupId + '"]')
  const groupCheckbox = document.querySelector('.group-checkbox[data-group="' + groupId + '"]')

  const checkedCount = Array.from(permissionCheckboxes).filter(cb => cb.checked).length

  if (checkedCount === 0) {
    groupCheckbox.checked = false
    groupCheckbox.indeterminate = false
  } else if (checkedCount === permissionCheckboxes.length) {
    groupCheckbox.checked = true
    groupCheckbox.indeterminate = false
  } else {
    groupCheckbox.checked = false
    groupCheckbox.indeterminate = true
  }
}

// 保存权限配置
async function savePermissions() {
  // 获取按钮和加载指示器元素
  const submitBtn = document.getElementById('submit_btn')
  const indicatorLabel = submitBtn.querySelector('.indicator-label')
  const indicatorProgress = submitBtn.querySelector('.indicator-progress')

  // 防止重复提交
  if (submitBtn.disabled) return

  try {
    // 显示加载状态
    if (indicatorLabel && indicatorProgress) {
      indicatorLabel.classList.add('hidden')
      indicatorProgress.classList.remove('hidden')
    }
    submitBtn.disabled = true

    // 获取所有选中的权限复选框
    const selectedCheckboxes = document.querySelectorAll('.permission-checkbox:checked')

    // 获取选中的权限ID
    const permissionIds = Array.from(selectedCheckboxes)
      .map(checkbox => parseInt(checkbox.dataset.id))
      .filter(id => !isNaN(id))

    const response = await axios.post('/api/roles/save-permissions/{{ info.id }}', {
      permission_ids: permissionIds,
      id: '{{ info.id }}'
    })

    if (response.data.code === 0) {
      Util.successMsg(trans('operation success'), () => {
        window.history.back()
      })
    } else {
      Util.errorMsg(response.data.msg || trans('operation failed'))
    }
  } catch (error) {
    console.error('保存权限失败:', error)
    Util.errorMsg(trans('error'))
  } finally {
    // 恢复按钮状态
    if (indicatorLabel && indicatorProgress) {
      indicatorLabel.classList.remove('hidden')
      indicatorProgress.classList.add('hidden')
    }
    submitBtn.disabled = false
  }
}
</script>
@endsection